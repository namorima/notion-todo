<!DOCTYPE html>
<html lang="id">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Notion TODO List</title>
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Cpath fill='%23dc2626' d='M6.017 4.313l55.333 -4.087c6.797 -0.583 8.543 -0.19 12.817 2.917l17.663 12.443c2.913 2.14 3.883 2.723 3.883 5.053v68.243c0 4.277 -1.553 6.807 -6.99 7.193L24.467 99.967c-4.08 0.193 -6.023 -0.39 -8.16 -3.113L3.3 79.94c-2.333 -3.113 -3.3 -5.443 -3.3 -8.167V11.113c0 -3.497 1.553 -6.413 6.017 -6.8z'/%3E%3Cpath fill='%23fff' d='M61.35 0.227l-55.333 4.087C1.553 4.7 0 7.617 0 11.113v60.66c0 2.723 0.967 5.053 3.3 8.167l13.007 16.913c2.137 2.723 4.08 3.307 8.16 3.113l64.257 -3.89c5.433 -0.387 6.99 -2.917 6.99 -7.193V20.64c0 -2.21 -0.873 -2.847 -3.443 -4.733L74.167 3.143c-4.273 -3.107 -6.02 -3.5 -12.817 -2.917zM25.92 19.523c-5.247 0.353 -6.437 0.433 -9.417 -1.99L8.927 11.507c-0.77 -0.78 -0.383 -1.753 1.557 -1.947l53.193 -3.887c4.467 -0.39 6.793 1.167 8.54 2.527l9.123 6.61c0.39 0.197 1.36 1.36 0.193 1.36l-54.933 3.307 -0.68 0.047zM19.803 88.3V30.367c0 -2.53 0.777 -3.697 3.103 -3.893L86 22.78c2.14 -0.193 3.107 1.167 3.107 3.693v57.547c0 2.53 -0.39 4.67 -3.883 4.863l-60.377 3.5c-3.493 0.193 -5.043 -0.97 -5.043 -4.083zm59.6 -54.827c0.387 1.75 0 3.5 -1.75 3.7l-2.91 0.577v42.773c-2.527 1.36 -4.853 2.137 -6.797 2.137 -3.107 0 -3.883 -0.973 -6.21 -3.887l-19.03 -29.94v28.967l6.02 1.363s0 3.5 -4.857 3.5l-13.39 0.777c-0.39 -0.78 0 -2.723 1.357 -3.11l3.497 -0.97v-38.3L30.48 40.667c-0.39 -1.75 0.58 -4.277 3.3 -4.473l14.367 -0.967 19.8 30.327v-26.83l-5.047 -0.58c-0.39 -2.143 1.163 -3.7 3.103 -3.89l13.4 -0.78z'/%3E%3C/svg%3E" />
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial,
          sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
      }

      .header {
        text-align: center;
        color: white;
        margin-bottom: 30px;
        position: relative;
      }

      .header h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
      }

      .header p {
        font-size: 1.1rem;
        opacity: 0.9;
      }

      .tab-navigation {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
      }

      .tab-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        padding: 12px 30px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        border-radius: 8px;
        transition: all 0.3s;
        backdrop-filter: blur(10px);
      }

      .tab-btn:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px);
      }

      .tab-btn.active {
        background: white;
        color: #667eea;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
      }

      .tab-content {
        display: none;
      }

      .tab-content.active {
        display: block;
      }

      .view-toggle {
        position: absolute;
        top: 0;
        right: 120px;
        display: flex;
        gap: 5px;
        background: rgba(255, 255, 255, 0.2);
        padding: 5px;
        border-radius: 8px;
        backdrop-filter: blur(10px);
      }

      .logout-btn {
        position: absolute;
        top: 0;
        right: 0;
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: none;
        padding: 8px 20px;
        border-radius: 8px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s;
        backdrop-filter: blur(10px);
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
      }

      .logout-btn:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px);
      }

      .view-btn {
        background: transparent;
        border: none;
        color: white;
        padding: 8px 12px;
        font-size: 1.2rem;
        cursor: pointer;
        border-radius: 5px;
        transition: all 0.3s;
      }

      .view-btn:hover {
        background: rgba(255, 255, 255, 0.3);
      }

      .view-btn.active {
        background: white;
        color: #667eea;
      }

      /* Hide view toggle on mobile */
      @media (max-width: 768px) {
        .view-toggle {
          display: none !important;
        }
      }

      .fab-button {
        position: fixed;
        bottom: 30px;
        right: 30px;
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 2rem;
        cursor: pointer;
        box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
        transition: all 0.3s;
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
        line-height: 1;
      }

      .fab-button:hover {
        transform: scale(1.1) rotate(90deg);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
      }

      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 2000;
        justify-content: center;
        align-items: center;
        animation: fadeIn 0.3s;
      }

      .modal.active {
        display: flex;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes slideUp {
        from {
          transform: translateY(50px);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      .modal-content {
        background: white;
        border-radius: 15px;
        padding: 30px;
        max-width: 500px;
        width: 90%;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        animation: slideUp 0.3s;
        max-height: 90vh;
        overflow-y: auto;
      }

      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
      }

      .modal-header h2 {
        color: #667eea;
        font-size: 1.5rem;
        margin: 0;
      }

      .close-button {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #999;
        cursor: pointer;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.3s;
      }

      .close-button:hover {
        background: #f5f5f5;
        color: #333;
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        color: #333;
        font-weight: 500;
      }

      .form-group input,
      .form-group select {
        width: 100%;
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s;
      }

      .form-group input:focus,
      .form-group select:focus {
        outline: none;
        border-color: #667eea;
      }

      .btn {
        padding: 12px 30px;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s;
        font-weight: 600;
      }

      .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
      }

      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
      }

      .btn-success {
        background: #4caf50;
        color: white;
        padding: 8px 15px;
        font-size: 0.9rem;
      }

      .btn-success:hover {
        background: #45a049;
      }

      .btn-danger {
        background: #f44336;
        color: white;
        padding: 8px 15px;
        font-size: 0.9rem;
      }

      .btn-danger:hover {
        background: #da190b;
      }

      .btn-icon {
        padding: 8px 12px;
        border: none;
        border-radius: 6px;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s;
        background: none;
        color: #666;
      }

      .btn-icon:hover {
        transform: scale(1.1);
      }

      .btn-icon.edit {
        color: #2196f3;
      }

      .btn-icon.edit:hover {
        background: #e3f2fd;
      }

      .btn-icon.delete {
        color: #f44336;
      }

      .btn-icon.delete:hover {
        background: #ffebee;
      }

      .btn-icon.done {
        color: #4caf50;
      }

      .btn-icon.done:hover {
        background: #e8f5e9;
      }

      .btn-icon.check-box {
        color: #999;
      }

      .btn-icon.check-box:hover {
        background: #f5f5f5;
        color: #666;
      }

      .btn-icon.check-box-done {
        color: #4caf50;
        cursor: default;
      }

      .btn-icon.check-box-done:hover {
        background: none;
        transform: none;
      }

      .icon-checked {
        color: #4caf50 !important;
      }

      .icon-unchecked {
        color: #999 !important;
      }

      .btn-loading {
        position: relative;
        pointer-events: none;
        opacity: 0.6;
      }

      .btn-loading::after {
        content: "";
        position: absolute;
        width: 16px;
        height: 16px;
        top: 50%;
        left: 50%;
        margin-left: -8px;
        margin-top: -8px;
        border: 2px solid white;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spinner 0.6s linear infinite;
      }

      @keyframes spinner {
        to {
          transform: rotate(360deg);
        }
      }

      .stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 30px;
      }

      @media (max-width: 768px) {
        .stats {
          grid-template-columns: repeat(2, 1fr);
          gap: 10px;
        }
      }

      .stat-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        text-align: center;
        cursor: pointer;
        transition: all 0.3s;
        border: 3px solid transparent;
      }

      .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
      }

      .stat-card.active {
        border-color: rgb(161, 178, 255);
        background: white;
        box-shadow: 0 8px 25px rgba(161, 178, 255, 0.4);
      }

      .stat-card .number {
        font-size: 2rem;
        font-weight: bold;
        color: #667eea;
      }

      .stat-card.active .number {
        color: rgb(161, 178, 255);
      }

      .stat-card .label {
        color: #666;
        margin-top: 5px;
        font-weight: 500;
      }

      .stat-card.active .label {
        color: #333;
        font-weight: 600;
      }

      @media (max-width: 768px) {
        .stat-card {
          padding: 15px 10px;
          border: 2px solid transparent;
        }

        .stat-card.active {
          border-width: 2px;
        }

        .stat-card .number {
          font-size: 1.5rem;
        }

        .stat-card .label {
          font-size: 0.85rem;
          margin-top: 3px;
        }
      }

      .todos-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        transition: all 0.3s;
      }

      .todos-grid.list-view {
        grid-template-columns: 1fr;
        gap: 10px;
      }

      .todos-grid.list-view .todo-card {
        display: flex !important;
        flex-direction: row !important;
        align-items: center !important;
        padding: 15px 20px !important;
        gap: 20px !important;
      }

      .todos-grid.list-view .todo-header {
        order: 1 !important;
        margin-bottom: 0 !important;
        flex: 1 !important;
        display: flex !important;
        flex-direction: row !important;
        align-items: center !important;
        gap: 10px !important;
      }

      .todos-grid.list-view .todo-title {
        font-size: 1rem !important;
      }

      .todos-grid.list-view .created-date {
        position: static !important;
        font-size: 0.7rem !important;
        margin-left: 15px !important;
      }

      .todos-grid.list-view .category-badge {
        order: 2 !important;
        margin-bottom: 0 !important;
        font-size: 0.75rem !important;
        padding: 4px 10px !important;
        flex-shrink: 0 !important;
      }

      .todos-grid.list-view .todo-meta {
        order: 3 !important;
        margin-bottom: 0 !important;
        gap: 8px !important;
        flex-shrink: 0 !important;
      }

      .todos-grid.list-view .todo-meta .status-badge {
        font-size: 0.75rem !important;
        padding: 4px 10px !important;
      }

      .todos-grid.list-view .todo-meta span {
        font-size: 0.8rem !important;
      }

      .todos-grid.list-view .todo-actions {
        order: 4 !important;
        margin-top: 0 !important;
        margin-bottom: 0 !important;
        margin-left: auto !important;
        display: flex !important;
        gap: 5px !important;
        flex-shrink: 0 !important;
      }

      .todos-grid.list-view .todo-actions .btn-success {
        font-size: 0.8rem !important;
        padding: 6px 10px !important;
        white-space: nowrap !important;
      }

      .todos-grid.list-view .btn-icon {
        font-size: 0.95rem !important;
        padding: 6px 8px !important;
      }

      .todo-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
        border-left: 5px solid #667eea;
      }

      .todo-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
      }

      .todo-card.done {
        border-left-color: #4caf50;
        opacity: 0.7;
      }

      .todo-card.overdue {
        border-left-color: #f44336;
      }

      .todo-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 15px;
        gap: 10px;
      }

      .todo-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #333;
        flex: 1;
      }

      .created-date {
        font-size: 0.75rem;
        color: #999;
        white-space: nowrap;
        align-self: flex-start;
      }

      .todo-card.done .todo-title {
        text-decoration: line-through;
        color: #999;
      }

      .category-badge {
        display: inline-block;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        margin-bottom: 10px;
      }

      .category-Penting {
        background: #ffebee;
        color: #c62828;
      }

      .category-Segera {
        background: #fff3e0;
        color: #e65100;
      }

      .category-Pribadi {
        background: #e3f2fd;
        color: #1565c0;
      }

      .category-default {
        background: #f5f5f5;
        color: #666;
      }

      .todo-meta {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
        color: #666;
        font-size: 0.9rem;
      }

      .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 5px;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
      }

      .status-success {
        background: #e8f5e9;
        color: #2e7d32;
      }

      .status-danger {
        background: #ffebee;
        color: #c62828;
      }

      .status-warning {
        background: #fff3e0;
        color: #ef6c00;
      }

      .status-secondary {
        background: #f5f5f5;
        color: #666;
      }

      .todo-actions {
        display: flex;
        gap: 10px;
        margin-top: 15px;
      }

      .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .empty-state-icon {
        font-size: 4rem;
        margin-bottom: 20px;
      }

      .empty-state h3 {
        color: #333;
        margin-bottom: 10px;
      }

      .empty-state p {
        color: #666;
      }

      .calendar-item {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
        border-left: 5px solid #667eea;
        margin-bottom: 15px;
      }

      .calendar-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
      }

      .calendar-item.done {
        border-left-color: #4caf50;
        opacity: 0.7;
      }

      .calendar-content {
        width: 100%;
      }

      .calendar-actions-right {
        display: flex;
        gap: 8px;
        align-items: center;
        flex-shrink: 0;
      }

      .calendar-header {
        display: flex;
        align-items: flex-start;
        gap: 20px;
        margin-bottom: 10px;
        flex-wrap: wrap;
      }

      .calendar-date-actions-row {
        display: contents;
      }

      .calendar-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #333;
        flex: 0 1 auto;
        min-width: 0;
        word-wrap: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
      }

      .calendar-item.done .calendar-title {
        text-decoration: line-through;
        color: #999;
      }

      .calendar-date {
        font-size: 0.9rem;
        color: #667eea;
        font-weight: 600;
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
      }

      .date-line {
        display: flex;
        align-items: center;
        gap: 6px;
        white-space: nowrap;
      }

      .date-end {
        padding-left: 20px;
      }

      .calendar-details {
        display: flex;
        gap: 15px;
        align-items: center;
        flex-wrap: wrap;
      }

      .calendar-location {
        font-size: 0.9rem;
        color: #666;
      }

      .tag-badge {
        display: inline-block;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        background: #e3f2fd;
        color: #1565c0;
        font-weight: 500;
      }

      .day-count {
        margin-left: 8px;
        padding: 2px 8px;
        background: #667eea;
        color: white;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
        white-space: nowrap;
      }

      .calendar-layout {
        display: grid;
        grid-template-columns: 1fr 400px;
        gap: 20px;
        align-items: start;
      }

      .calendar-events-list {
        max-height: 80vh;
        overflow-y: auto;
        padding-right: 10px;
      }

      /* Custom Scrollbar for Calendar Events List */
      .calendar-events-list::-webkit-scrollbar {
        width: 10px;
      }

      .calendar-events-list::-webkit-scrollbar-track {
        background: #f0f0f0;
        border-radius: 10px;
        margin: 10px 0;
      }

      .calendar-events-list::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px;
        transition: all 0.3s;
      }

      .calendar-events-list::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
        box-shadow: 0 0 10px rgba(102, 126, 234, 0.5);
      }

      /* Firefox Scrollbar */
      .calendar-events-list {
        scrollbar-width: thin;
        scrollbar-color: #667eea #f0f0f0;
      }

      .calendar-events-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e0e0e0;
      }

      .calendar-events-header h3 {
        margin: 0;
        font-size: 1.5rem;
        color: #333;
      }

      .btn-add-event {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 10px;
        font-size: 0.95rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        box-shadow: 0 4px 10px rgba(102, 126, 234, 0.3);
      }

      .btn-add-event:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 15px rgba(102, 126, 234, 0.4);
      }

      .calendar-grid-container {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 20px;
      }

      .calendar-header-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
      }

      .calendar-month-year {
        font-size: 1.2rem;
        font-weight: 600;
        color: #667eea;
      }

      .calendar-nav-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #667eea;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 5px;
        transition: background 0.3s;
      }

      .calendar-nav-btn:hover {
        background: #f0f0f0;
      }

      .clear-filter-btn {
        background: #ff6b6b;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 600;
        cursor: pointer;
        margin-bottom: 15px;
        transition: all 0.3s;
        display: none;
      }

      .clear-filter-btn:hover {
        background: #ff5252;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(255, 107, 107, 0.3);
      }

      .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
      }

      .calendar-day-header {
        text-align: center;
        font-weight: 600;
        color: #666;
        padding: 10px 5px;
        font-size: 0.85rem;
      }

      .calendar-day-header.weekend {
        color: rgba(33, 150, 243, 0.3);
      }

      .calendar-day {
        height: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s;
        position: relative;
        font-size: 0.9rem;
        color: #333;
      }

      .calendar-day:hover {
        background: #f5f5f5;
      }

      .calendar-day.other-month {
        color: #ccc;
      }

      .calendar-day.weekend {
        color: rgba(33, 150, 243, 0.3);
      }

      .calendar-day.today {
        background: #10b981;
        color: white;
        font-weight: 600;
      }

      .calendar-day.has-event {
        background: #667eea;
        color: white;
        font-weight: 600;
      }

      .calendar-day.has-event:hover {
        background: #5568d3;
      }

      .calendar-day.selected {
        background: rgba(102, 126, 234, 0.2);
        border: 2px solid #667eea;
      }

      .calendar-day.is-holiday {
        border: 2px solid #f44336;
        font-weight: 600;
        color: #f44336;
      }

      .calendar-day.is-holiday:hover {
        background: #ffebee;
      }

      .calendar-day.is-holiday.other-month {
        border: 2px solid rgba(244, 67, 54, 0.3);
        color: rgba(244, 67, 54, 0.3);
        font-weight: 500;
      }

      .calendar-day.is-holiday.other-month:hover {
        background: rgba(255, 235, 238, 0.5);
      }

      /* Previous month event with opacity - only apply to background color */
      .calendar-day.previous-month-event {
        background: rgba(102, 126, 234, 0.4) !important;
      }

      .calendar-day.previous-month-event:hover {
        background: rgba(85, 104, 211, 0.4) !important;
      }

      /* CUTI REHAT - Red background with white text */
      .calendar-day.event-cuti-rehat {
        background: #dc2626 !important;
        color: white !important;
        font-weight: 700;
      }

      .calendar-day.event-cuti-rehat:hover {
        background: #b91c1c !important;
      }

      /* CUTI SAKIT - Orange background with black text */
      .calendar-day.event-cuti-sakit {
        background: #f97316 !important;
        color: #000 !important;
        font-weight: 700;
      }

      .calendar-day.event-cuti-sakit:hover {
        background: #ea580c !important;
      }

      @media (max-width: 1024px) {
        .calendar-layout {
          grid-template-columns: 1fr;
        }

        .calendar-grid-container {
          position: static;
          order: -1;
          margin-bottom: 20px;
        }
      }

      @media (max-width: 768px) {
        .calendar-grid-container {
          padding: 15px;
        }

        .calendar-day {
          font-size: 0.8rem;
        }

        .calendar-day-header {
          font-size: 0.75rem;
          padding: 8px 3px;
        }

        /* Mobile Card Layout for Calendar Events */
        .calendar-item {
          padding: 15px;
          border-radius: 10px;
          margin-bottom: 12px;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
        }

        .calendar-item:active {
          transform: scale(0.98);
        }

        .calendar-header {
          flex-direction: column;
          gap: 10px;
          margin-bottom: 12px;
        }

        .calendar-date-actions-row {
          display: flex;
          align-items: center;
          gap: 10px;
          width: 100%;
          justify-content: space-between;
        }

        .calendar-title {
          font-size: 1.05rem;
          line-height: 1.4;
          width: 100%;
        }

        .calendar-date {
          align-items: flex-start;
          font-size: 0.85rem;
          width: auto;
          flex-direction: row;
          flex-wrap: wrap;
          flex: 1;
          gap: 0;
        }

        .date-line {
          font-size: 0.85rem;
          display: inline-flex;
        }

        .date-end {
          padding-left: 0;
          padding-top: 0;
          margin-left: 0;
        }

        .day-count {
          margin-left: 6px;
          padding: 2px 6px;
          font-size: 0.7rem;
        }

        .calendar-details {
          flex-direction: column;
          gap: 8px;
          align-items: flex-start;
        }

        .calendar-location {
          font-size: 0.85rem;
          display: flex;
          align-items: center;
          gap: 6px;
        }

        .tag-badge {
          font-size: 0.75rem;
          padding: 3px 8px;
        }

        .calendar-actions-right {
          gap: 6px;
          margin-top: 0;
          width: auto;
          justify-content: flex-end;
          flex-shrink: 0;
        }

        .calendar-actions-right .icon-btn {
          padding: 6px;
          width: 32px;
          height: 32px;
        }

        .calendar-actions-right .icon-btn i {
          width: 16px;
          height: 16px;
        }

        .clear-filter-btn {
          font-size: 0.85rem;
          padding: 10px 14px;
          margin-bottom: 10px;
        }

        /* Calendar Events List Mobile */
        .calendar-events-list {
          max-height: none;
          padding-right: 0;
          margin-bottom: 20px;
        }

        .calendar-events-header {
          flex-direction: column;
          align-items: flex-start;
          gap: 10px;
          margin-bottom: 15px;
          padding-bottom: 10px;
        }

        .calendar-events-header h2 {
          font-size: 1.3rem;
        }

        .btn-add-event {
          position: fixed;
          bottom: 80px;
          right: 20px;
          width: 56px;
          height: 56px;
          padding: 0;
          border-radius: 50%;
          font-size: 1.5rem;
          box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
          z-index: 999;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .btn-add-event:hover {
          transform: scale(1.1);
        }

        .btn-add-event-text {
          display: none;
        }

        .btn-add-event-icon {
          display: inline;
        }

        /* Logout button - icon only on mobile */
        .logout-btn {
          padding: 8px 12px;
          font-size: 1.2rem;
        }

        .logout-btn-text {
          display: none;
        }
      }

      @media (max-width: 768px) {
        .header h1 {
          font-size: 2rem;
        }

        .todos-grid {
          grid-template-columns: 1fr;
        }
      }

      /* Lucide Icon Sizes */
      .icon-xs {
        width: 14px;
        height: 14px;
        vertical-align: middle;
      }

      .icon-sm {
        width: 18px;
        height: 18px;
        vertical-align: middle;
      }

      .icon-md {
        width: 24px;
        height: 24px;
        vertical-align: middle;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <div class="view-toggle">
          <button
            class="view-btn active"
            onclick="toggleView('grid')"
            id="gridBtn"
            title="Grid View"
          >
            ⊞
          </button>
          <button class="view-btn" onclick="toggleView('list')" id="listBtn" title="List View">
            ☰
          </button>
        </div>
        <a href="/logout" class="logout-btn" title="Logout">
          <i data-lucide="log-out"></i>
          <span class="logout-btn-text"> Logout</span>
        </a>
        <h1>📝 Notion Manager</h1>
        <p>Manage your tasks and events with style</p>
      </div>

      <!-- Tab Navigation -->
      <div class="tab-navigation">
        <button class="tab-btn active" onclick="switchTab('todos')" id="todosTab">📝 Todos</button>
        <button class="tab-btn" onclick="switchTab('calendar')" id="calendarTab">
          📅 Calendar
        </button>
      </div>

      <!-- Floating Action Button -->
      <button class="fab-button" onclick="openAddModal()">+</button>

      <!-- Add Todo Modal -->
      <div class="modal" id="todoModal" onclick="closeModalOnBackdrop(event)">
        <div class="modal-content">
          <div class="modal-header">
            <h2>➕ Tambah TODO Baru</h2>
            <button class="close-button" onclick="closeModal()">&times;</button>
          </div>
          <form action="/add" method="POST" id="addForm">
            <div class="form-group">
              <label for="name">Nama Todo</label>
              <input
                type="text"
                id="name"
                name="name"
                required
                placeholder="Masukkan nama todo..."
              />
            </div>
            <div class="form-group">
              <label for="category">Kategori</label>
              <select id="category" name="category">
                <option value="Tiada kategori">📝 Tiada kategori</option>
                <option value="Penting">🔥 Penting</option>
                <option value="Segera">⚡ Segera</option>
                <option value="Pribadi">👤 Pribadi</option>
              </select>
            </div>
            <div class="form-group">
              <label for="dueDate">Due Date (Optional)</label>
              <input type="date" id="dueDate" name="dueDate" />
            </div>
            <button type="submit" class="btn btn-primary" id="submitBtn">Tambah Todo</button>
          </form>
        </div>
      </div>

      <!-- Edit Todo Modal -->
      <div class="modal" id="editModal" onclick="closeModalOnBackdrop(event)">
        <div class="modal-content">
          <div class="modal-header">
            <h2>✏️ Edit TODO</h2>
            <button class="close-button" onclick="closeEditModal()">&times;</button>
          </div>
          <form action="/edit" method="POST" id="editForm">
            <input type="hidden" id="editId" name="id" />
            <div class="form-group">
              <label for="editName">Nama Todo</label>
              <input
                type="text"
                id="editName"
                name="name"
                required
                placeholder="Masukkan nama todo..."
              />
            </div>
            <div class="form-group">
              <label for="editCategory">Kategori</label>
              <select id="editCategory" name="category">
                <option value="Tiada kategori">📝 Tiada kategori</option>
                <option value="Penting">🔥 Penting</option>
                <option value="Segera">⚡ Segera</option>
                <option value="Pribadi">👤 Pribadi</option>
              </select>
            </div>
            <div class="form-group">
              <label for="editDueDate">Due Date (Optional)</label>
              <input type="date" id="editDueDate" name="dueDate" />
            </div>
            <button type="submit" class="btn btn-primary">Update Todo</button>
          </form>
        </div>
      </div>

      <!-- Add Calendar Modal -->
      <div class="modal" id="calendarModal" onclick="closeModalOnBackdrop(event)">
        <div class="modal-content">
          <div class="modal-header">
            <h2>📅 Tambah Event Baru</h2>
            <button class="close-button" onclick="closeCalendarModal()">&times;</button>
          </div>
          <form action="/calendar/add" method="POST" id="addCalendarForm">
            <div class="form-group">
              <label for="calendarName">Nama Event</label>
              <input
                type="text"
                id="calendarName"
                name="name"
                required
                placeholder="Masukkan nama event..."
              />
            </div>
            <div class="form-group">
              <label for="calendarDateStart">Tarikh Mula</label>
              <input type="date" id="calendarDateStart" name="dateStart" required />
            </div>
            <div class="form-group">
              <label for="calendarDateEnd">Tarikh Akhir (Optional)</label>
              <input type="date" id="calendarDateEnd" name="dateEnd" />
            </div>
            <div class="form-group">
              <label for="calendarLocation">Lokasi (Optional)</label>
              <input
                type="text"
                id="calendarLocation"
                name="location"
                placeholder="Masukkan lokasi..."
              />
            </div>
            <div class="form-group">
              <label for="calendarTags">Tags (Optional, pisahkan dengan koma)</label>
              <input
                type="text"
                id="calendarTags"
                name="tags"
                placeholder="Contoh: Meeting, Work, Personal"
              />
            </div>
            <button type="submit" class="btn btn-primary" id="submitCalendarBtn">
              Tambah Event
            </button>
          </form>
        </div>
      </div>

      <!-- Edit Calendar Modal -->
      <div class="modal" id="editCalendarModal" onclick="closeModalOnBackdrop(event)">
        <div class="modal-content">
          <div class="modal-header">
            <h2>✏️ Edit Event</h2>
            <button class="close-button" onclick="closeEditCalendarModal()">&times;</button>
          </div>
          <form action="/calendar/edit" method="POST" id="editCalendarForm">
            <input type="hidden" id="editCalendarId" name="id" />
            <div class="form-group">
              <label for="editCalendarName">Nama Event</label>
              <input
                type="text"
                id="editCalendarName"
                name="name"
                required
                placeholder="Masukkan nama event..."
              />
            </div>
            <div class="form-group">
              <label for="editCalendarDateStart">Tarikh Mula</label>
              <input type="date" id="editCalendarDateStart" name="dateStart" required />
            </div>
            <div class="form-group">
              <label for="editCalendarDateEnd">Tarikh Akhir (Optional)</label>
              <input type="date" id="editCalendarDateEnd" name="dateEnd" />
            </div>
            <div class="form-group">
              <label for="editCalendarLocation">Lokasi (Optional)</label>
              <input
                type="text"
                id="editCalendarLocation"
                name="location"
                placeholder="Masukkan lokasi..."
              />
            </div>
            <div class="form-group">
              <label for="editCalendarTags">Tags (Optional, pisahkan dengan koma)</label>
              <input
                type="text"
                id="editCalendarTags"
                name="tags"
                placeholder="Contoh: Meeting, Work, Personal"
              />
            </div>
            <button type="submit" class="btn btn-primary" id="updateCalendarBtn">
              Update Event
            </button>
          </form>
        </div>
      </div>

      <!-- Todos Tab Content -->
      <div class="tab-content active" id="todosContent">
        <!-- Statistics -->
        <div class="stats">
          <div class="stat-card" onclick="filterTodos('all')" data-filter="all">
            <div class="number"><%= todos.length %></div>
            <div class="label">Total Todos</div>
          </div>
          <div class="stat-card" onclick="filterTodos('completed')" data-filter="completed">
            <div class="number"><%= todos.filter(t => t.status === 'Done').length %></div>
            <div class="label">Completed</div>
          </div>
          <div class="stat-card" onclick="filterTodos('overdue')" data-filter="overdue">
            <div class="number"><%= todos.filter(t => t.statusColor === 'danger').length %></div>
            <div class="label">Overdue</div>
          </div>
          <div class="stat-card" onclick="filterTodos('pending')" data-filter="pending">
            <div class="number"><%= todos.filter(t => t.status !== 'Done').length %></div>
            <div class="label">Pending</div>
          </div>
        </div>

        <!-- Todos Grid -->
        <% if (todos.length === 0) { %>
        <div class="empty-state">
          <div class="empty-state-icon">🎉</div>
          <h3>Tidak ada todo</h3>
          <p>Tambahkan todo pertama Anda untuk memulai!</p>
        </div>
        <% } else { %>
        <div class="todos-grid">
          <% todos.forEach(todo => { %>
          <div
            class="todo-card <%= todo.status === 'Done' ? 'done' : '' %> <%= todo.statusColor === 'danger' ? 'overdue' : '' %>"
            data-status="<%= todo.status %>"
            data-status-color="<%= todo.statusColor %>"
          >
            <div class="todo-header">
              <div class="todo-title"><%= todo.name %></div>
              <div class="created-date"><%= todo.createdTimeFormatted %></div>
            </div>

            <span class="category-badge category-<%= todo.category.replace(' ', '-') %>">
              <%= todo.categoryEmoji %> <%= todo.category %>
            </span>

            <div class="todo-meta">
              <span class="status-badge status-<%= todo.statusColor %>">
                <%= todo.statusIcon %> <%= todo.statusText %>
              </span>
              <% if (todo.dueDate) { %>
              <span>📅 <%= todo.dueDateFormatted %></span>
              <% } %>
            </div>

            <div class="todo-actions">
              <% if (todo.status !== 'Done') { %>
              <form action="/done/<%= todo.id %>" method="POST" style="display: inline">
                <button type="submit" class="btn btn-success">✅ Mark Done</button>
              </form>
              <% } %>
              <button
                class="btn-icon edit"
                onclick="openEditModal('<%= todo.id %>', '<%= todo.name %>', '<%= todo.category %>', '<%= todo.dueDate %>')"
                title="Edit"
              >
                <i data-lucide="pencil" class="icon-sm"></i>
              </button>
              <form action="/delete/<%= todo.id %>" method="POST" style="display: inline">
                <button
                  type="submit"
                  class="btn-icon delete"
                  onclick="return confirm('Hapus todo ini?')"
                  title="Delete"
                >
                  <i data-lucide="trash-2" class="icon-sm"></i>
                </button>
              </form>
            </div>
          </div>
          <% }); %>
        </div>
        <% } %>
      </div>
      <!-- End Todos Tab Content -->

      <!-- Calendar Tab Content -->
      <div class="tab-content" id="calendarContent">
        <div class="calendar-layout">
          <!-- Events List (Left) -->
          <div class="calendar-events-list" id="calendarEventsList">
            <div class="calendar-events-header">
              <h3>Events</h3>
              <button class="btn-add-event" onclick="openCalendarModal()">
                <span class="btn-add-event-icon">+</span>
                <span class="btn-add-event-text">Tambah Event</span>
              </button>
            </div>
            <% if (calendar.length === 0) { %>
            <div class="empty-state">
              <div class="empty-state-icon">📅</div>
              <h3>Tidak ada event</h3>
              <p>Belum ada event di calendar!</p>
            </div>
            <% } else { %> <% calendar.forEach(event => { %>
            <div
              class="calendar-item <%= event.selesai ? 'done' : '' %>"
              data-date="<%= event.date %>"
              data-date-end="<%= event.dateEnd || '' %>"
              data-name="<%= event.name %>"
            >
              <div class="calendar-content">
                <div class="calendar-header">
                  <div class="calendar-title"><%= event.name %></div>
                  <div class="calendar-date-actions-row">
                    <div class="calendar-date">
                      <div class="date-line">
                        <i data-lucide="calendar" class="icon-xs"></i>
                        <span
                          ><%= new Date(event.dateStart).toLocaleDateString('ms-MY', { day: '2-digit',
                          month: 'short', year: 'numeric' }) %></span
                        >
                        <% if (event.dateEnd) { %>
                        <i data-lucide="arrow-right" class="icon-xs"></i>
                        <% } %>
                      </div>
                      <% if (event.dateEnd) { %>
                      <div class="date-line date-end">
                        <%= new Date(event.dateEnd).toLocaleDateString('ms-MY', { day: '2-digit',
                        month: 'short', year: 'numeric' }) %>
                      </div>
                      <% } %>
                    </div>
                    <div class="calendar-actions-right">
                    <% if (!event.selesai) { %>
                    <form
                      action="/calendar/done/<%= event.id %>"
                      method="POST"
                      style="display: inline"
                    >
                      <button type="submit" class="btn-icon check-box" title="Mark Done">
                        <i data-lucide="square-check-big" class="icon-sm icon-unchecked"></i>
                      </button>
                    </form>
                    <% } else { %>
                    <button type="button" class="btn-icon check-box-done" title="Completed">
                      <i data-lucide="square-check-big" class="icon-sm icon-checked"></i>
                    </button>
                    <% } %>
                    <button
                      class="btn-icon edit"
                      onclick="openEditCalendarModal('<%= event.id %>', '<%= event.name %>', '<%= event.dateStart %>', '<%= event.dateEnd %>', '<%= event.location %>', '<%= event.tags.join(', ') %>')"
                      title="Edit"
                    >
                      <i data-lucide="pencil" class="icon-sm"></i>
                    </button>
                    <form
                      action="/calendar/delete/<%= event.id %>"
                      method="POST"
                      style="display: inline"
                    >
                      <button
                        type="submit"
                        class="btn-icon delete"
                        onclick="return confirm('Hapus event ini?')"
                        title="Delete"
                      >
                        <i data-lucide="trash-2" class="icon-sm"></i>
                      </button>
                    </form>
                    </div>
                  </div>
                </div>

                <div class="calendar-details">
                  <% if (event.location) { %>
                  <div class="calendar-location">
                    <i data-lucide="map-pin" class="icon-xs"></i> <%= event.location %>
                    <% if (event.dateEnd) {
                      const start = new Date(event.dateStart);
                      const end = new Date(event.dateEnd);
                      const diffTime = Math.abs(end - start);
                      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
                    %>
                    <span class="day-count">(<%=diffDays%> hari)</span>
                    <% } %>
                  </div>
                  <% } %> <% event.tags.forEach(tag => { %>
                  <span class="tag-badge"><%= tag %></span>
                  <% }); %>
                </div>
              </div>
            </div>
            <% }); %> <% } %>
          </div>

          <!-- Calendar Grid (Right) -->
          <div class="calendar-grid-container">
            <div class="calendar-header-controls">
              <button class="calendar-nav-btn" onclick="previousMonth()">‹</button>
              <div class="calendar-month-year" id="calendarMonthYear"></div>
              <button class="calendar-nav-btn" onclick="nextMonth()">›</button>
            </div>
            <button class="clear-filter-btn" id="clearFilterBtn" onclick="clearFilter()" style="display: none;">
              ✕ Clear Filter
            </button>

            <div class="calendar-grid" id="calendarGrid">
              <div class="calendar-day-header">Ahd</div>
              <div class="calendar-day-header">Isn</div>
              <div class="calendar-day-header">Sel</div>
              <div class="calendar-day-header">Rab</div>
              <div class="calendar-day-header">Kha</div>
              <div class="calendar-day-header weekend">Jum</div>
              <div class="calendar-day-header weekend">Sab</div>
            </div>
          </div>
        </div>
      </div>
      <!-- End Calendar Tab Content -->
    </div>

    <script>
      let currentFilter = 'all';

      function openAddModal() {
        // Check which tab is active
        const activeTab = localStorage.getItem('activeTab') || 'todos';

        if (activeTab === 'calendar') {
          openCalendarModal();
        } else {
          openTodoModal();
        }
      }

      function openTodoModal() {
        document.getElementById('todoModal').classList.add('active');
        document.getElementById('name').focus();
      }

      function openCalendarModal() {
        document.getElementById('calendarModal').classList.add('active');
        document.getElementById('calendarName').focus();
      }

      function closeModal() {
        document.getElementById('todoModal').classList.remove('active');
      }

      function closeCalendarModal() {
        document.getElementById('calendarModal').classList.remove('active');
      }

      function openEditCalendarModal(id, name, dateStart, dateEnd, location, tags) {
        document.getElementById('editCalendarId').value = id;
        document.getElementById('editCalendarName').value = name;
        document.getElementById('editCalendarDateStart').value = dateStart === 'null' ? '' : dateStart;
        document.getElementById('editCalendarDateEnd').value = dateEnd === 'null' ? '' : dateEnd;
        document.getElementById('editCalendarLocation').value = location === 'null' ? '' : location;
        document.getElementById('editCalendarTags').value = tags === 'null' ? '' : tags;
        document.getElementById('editCalendarModal').classList.add('active');
        document.getElementById('editCalendarName').focus();
      }

      function closeEditCalendarModal() {
        document.getElementById('editCalendarModal').classList.remove('active');
      }

      function closeModalOnBackdrop(event) {
        if (event.target.id === 'todoModal') {
          closeModal();
        }
        if (event.target.id === 'editModal') {
          closeEditModal();
        }
        if (event.target.id === 'calendarModal') {
          closeCalendarModal();
        }
        if (event.target.id === 'editCalendarModal') {
          closeEditCalendarModal();
        }
      }

      function openEditModal(id, name, category, dueDate) {
        document.getElementById('editId').value = id;
        document.getElementById('editName').value = name;
        document.getElementById('editCategory').value = category;
        document.getElementById('editDueDate').value = dueDate === 'null' ? '' : dueDate;
        document.getElementById('editModal').classList.add('active');
        document.getElementById('editName').focus();
      }

      function closeEditModal() {
        document.getElementById('editModal').classList.remove('active');
      }

      function switchTab(tabName) {
        // Hide all tab contents
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.remove('active');
        });

        // Remove active from all tab buttons
        document.querySelectorAll('.tab-btn').forEach(btn => {
          btn.classList.remove('active');
        });

        // Show selected tab content
        document.getElementById(tabName + 'Content').classList.add('active');
        document.getElementById(tabName + 'Tab').classList.add('active');

        // Hide view toggle for calendar tab
        const viewToggle = document.querySelector('.view-toggle');
        const fabButton = document.querySelector('.fab-button');

        if (tabName === 'calendar') {
          viewToggle.style.display = 'none';
          fabButton.style.display = 'none';
        } else {
          const isMobile = window.innerWidth <= 768;
          viewToggle.style.display = isMobile ? 'none' : 'flex';
          fabButton.style.display = 'flex';
        }

        // Save active tab
        localStorage.setItem('activeTab', tabName);
      }

      function toggleView(viewType) {
        // Check if mobile device
        const isMobile = window.innerWidth <= 768;

        // Force grid view on mobile
        if (isMobile) {
          viewType = 'grid';
        }

        const todosGrid = document.querySelector('.todos-grid');
        const gridBtn = document.getElementById('gridBtn');
        const listBtn = document.getElementById('listBtn');

        if (viewType === 'list' && !isMobile) {
          todosGrid.classList.add('list-view');
          gridBtn.classList.remove('active');
          listBtn.classList.add('active');
          localStorage.setItem('viewType', 'list');
        } else {
          todosGrid.classList.remove('list-view');
          gridBtn.classList.add('active');
          listBtn.classList.remove('active');
          localStorage.setItem('viewType', 'grid');
        }
      }

      function filterTodos(filterType) {
        currentFilter = filterType;

        // Update active state on stat cards
        const statCards = document.querySelectorAll('.stat-card');
        statCards.forEach(card => {
          if (card.dataset.filter === filterType) {
            card.classList.add('active');
          } else {
            card.classList.remove('active');
          }
        });

        // Filter todo cards
        const todoCards = document.querySelectorAll('.todo-card');
        todoCards.forEach(card => {
          const status = card.dataset.status;
          const statusColor = card.dataset.statusColor;

          let shouldShow = false;

          switch(filterType) {
            case 'all':
              shouldShow = true;
              break;
            case 'completed':
              shouldShow = status === 'Done';
              break;
            case 'overdue':
              shouldShow = statusColor === 'danger';
              break;
            case 'pending':
              shouldShow = status !== 'Done';
              break;
          }

          if (shouldShow) {
            card.style.display = 'block';
          } else {
            card.style.display = 'none';
          }
        });
      }

      // Close modal with ESC key
      document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
          closeModal();
          closeEditModal();
          closeCalendarModal();
          closeEditCalendarModal();
        }
      });

      // Calendar Variables
      let currentMonth = new Date().getMonth();
      let currentYear = new Date().getFullYear();
      let calendarEvents = [];

      // Malaysia Holidays from server
      const holidays = <%- JSON.stringify(holidays) %>;

      // Calendar Functions
      function renderCalendar() {
        const monthNames = ['Januari', 'Februari', 'Mac', 'April', 'Mei', 'Jun',
                            'Julai', 'Ogos', 'September', 'Oktober', 'November', 'Disember'];

        document.getElementById('calendarMonthYear').textContent =
          `${monthNames[currentMonth]} ${currentYear}`;

        const firstDay = new Date(currentYear, currentMonth, 1).getDay();
        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
        const daysInPrevMonth = new Date(currentYear, currentMonth, 0).getDate();

        const calendarGridEl = document.getElementById('calendarGrid');

        // Remove existing day elements (keep headers)
        const dayElements = calendarGridEl.querySelectorAll('.calendar-day');
        dayElements.forEach(el => el.remove());

        const today = new Date();
        const todayDate = today.getDate();
        const todayMonth = today.getMonth();
        const todayYear = today.getFullYear();

        // Previous month days
        for (let i = firstDay - 1; i >= 0; i--) {
          const day = daysInPrevMonth - i;
          const dayEl = createDayElement(day, 'other-month', currentMonth === 0 ? 11 : currentMonth - 1, currentMonth === 0 ? currentYear - 1 : currentYear);
          calendarGridEl.appendChild(dayEl);
        }

        // Current month days
        for (let day = 1; day <= daysInMonth; day++) {
          const isToday = day === todayDate && currentMonth === todayMonth && currentYear === todayYear;
          const dayEl = createDayElement(day, isToday ? 'today' : '', currentMonth, currentYear);
          calendarGridEl.appendChild(dayEl);
        }

        // Next month days
        const totalCells = calendarGridEl.querySelectorAll('.calendar-day').length;
        const remainingCells = 35 - totalCells; // 5 rows * 7 days
        for (let day = 1; day <= remainingCells; day++) {
          const dayEl = createDayElement(day, 'other-month', currentMonth === 11 ? 0 : currentMonth + 1, currentMonth === 11 ? currentYear + 1 : currentYear);
          calendarGridEl.appendChild(dayEl);
        }

        filterEventsByMonth();
      }

      function createDayElement(day, className, month, year) {
        const dayEl = document.createElement('div');
        dayEl.className = `calendar-day ${className}`;
        dayEl.textContent = day;

        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

        // Check if it's Friday (5) or Saturday (6)
        const dayOfWeek = new Date(year, month, day).getDay();
        if (dayOfWeek === 5 || dayOfWeek === 6) {
          dayEl.classList.add('weekend');
        }

        // Check for events on this date (including multi-day events)
        const eventsOnDate = calendarEvents.filter(e => {
          // Check if date is the start date
          if (e.date === dateStr) return true;

          // Check if date is within a multi-day event range
          if (e.dateEnd) {
            const currentDate = new Date(dateStr);
            const startDate = new Date(e.date);
            const endDate = new Date(e.dateEnd);
            return currentDate >= startDate && currentDate <= endDate;
          }

          return false;
        });
        const hasEvent = eventsOnDate.length > 0;

        if (hasEvent) {
          dayEl.classList.add('has-event');

          // Check for special event types
          const hasCutiRehat = eventsOnDate.some(e => e.name.toUpperCase().includes('CUTI REHAT'));
          const hasCutiSakit = eventsOnDate.some(e => e.name.toUpperCase().includes('CUTI SAKIT'));

          if (hasCutiRehat) {
            dayEl.classList.add('event-cuti-rehat');
          } else if (hasCutiSakit) {
            dayEl.classList.add('event-cuti-sakit');
          }

          // Check if this is a previous month date showing in current month grid
          // Example: If viewing November (month=10), and date is 29 Oct (in other-month section)
          // And there's an event on that date, show it with opacity
          const currentGridDate = new Date(dateStr);
          const gridDateMonth = currentGridDate.getMonth();
          const gridDateYear = currentGridDate.getFullYear();

          // Check if it's from previous month (handle year wraparound)
          const isFromPreviousMonth = className === 'other-month' &&
            (gridDateYear < currentYear ||
             (gridDateYear === currentYear && gridDateMonth < currentMonth)) &&
            !hasCutiRehat && !hasCutiSakit; // Don't apply opacity to CUTI events

          if (isFromPreviousMonth) {
            dayEl.classList.add('previous-month-event');
          }

          // Add tooltip with event names
          const eventNames = eventsOnDate.map(e => e.name).join('\n');
          dayEl.title = eventNames;
        }

        // Check if this date is a holiday
        const holiday = holidays.find(h => h.date === dateStr);
        if (holiday) {
          dayEl.classList.add('is-holiday');
          // Combine holiday name with event names if both exist
          if (hasEvent) {
            const eventNames = eventsOnDate.map(e => e.name).join('\n');
            dayEl.title = `${holiday.name}\n\n${eventNames}`;
          } else {
            dayEl.title = holiday.name;
          }
        }

        dayEl.onclick = () => selectDate(dateStr);

        return dayEl;
      }

      function previousMonth() {
        currentMonth--;
        if (currentMonth < 0) {
          currentMonth = 11;
          currentYear--;
        }
        renderCalendar();
      }

      function nextMonth() {
        currentMonth++;
        if (currentMonth > 11) {
          currentMonth = 0;
          currentYear++;
        }
        renderCalendar();
      }

      function selectDate(dateStr) {
        // Filter events by selected date (including multi-day events)
        const eventItems = document.querySelectorAll('.calendar-item');
        const selectedDate = new Date(dateStr);
        let hasVisibleEvents = false;

        eventItems.forEach(item => {
          const startDate = new Date(item.dataset.date);
          const endDateStr = item.dataset.dateEnd;

          let shouldShow = false;

          if (endDateStr && endDateStr !== '') {
            // Multi-day event: check if selected date is within range
            const endDate = new Date(endDateStr);
            shouldShow = selectedDate >= startDate && selectedDate <= endDate;
          } else {
            // Single day event: exact match
            shouldShow = item.dataset.date === dateStr;
          }

          if (shouldShow) {
            item.style.display = 'block';
            if (!hasVisibleEvents) {
              item.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
              hasVisibleEvents = true;
            }
          } else {
            item.style.display = 'none';
          }
        });

        // Show clear filter button
        showClearFilterButton();
      }

      function showClearFilterButton() {
        const clearBtn = document.getElementById('clearFilterBtn');
        if (clearBtn) {
          clearBtn.style.display = 'block';
        }
      }

      function clearFilter() {
        // Show all events
        const eventItems = document.querySelectorAll('.calendar-item');
        eventItems.forEach(item => {
          item.style.display = 'block';
        });

        // Hide clear filter button
        const clearBtn = document.getElementById('clearFilterBtn');
        if (clearBtn) {
          clearBtn.style.display = 'none';
        }
      }

      function filterEventsByMonth() {
        const eventItems = document.querySelectorAll('.calendar-item');
        let hasVisibleEvents = false;

        eventItems.forEach(item => {
          const itemDate = new Date(item.dataset.date);
          if (itemDate.getMonth() === currentMonth && itemDate.getFullYear() === currentYear) {
            item.style.display = 'block';
            hasVisibleEvents = true;
          } else {
            item.style.display = 'none';
          }
        });
      }

      // Add loading state on form submit
      document.addEventListener('DOMContentLoaded', function() {
        // Restore saved tab
        const savedTab = localStorage.getItem('activeTab') || 'todos';
        switchTab(savedTab);

        filterTodos('all');

        // Load calendar events
        const allEvents = document.querySelectorAll('.calendar-item');
        calendarEvents = Array.from(allEvents).map(item => ({
          date: item.dataset.date,
          dateEnd: item.dataset.dateEnd || null,
          name: item.dataset.name
        }));

        // Render calendar
        renderCalendar();

        // Check if mobile
        const isMobile = window.innerWidth <= 768;

        // Restore saved view type (force grid on mobile)
        const savedView = isMobile ? 'grid' : (localStorage.getItem('viewType') || 'grid');
        toggleView(savedView);

        // Force grid view on window resize to mobile
        window.addEventListener('resize', function() {
          const isNowMobile = window.innerWidth <= 768;
          if (isNowMobile) {
            toggleView('grid');
          }
          // Update view toggle and FAB button visibility based on active tab
          const activeTab = localStorage.getItem('activeTab') || 'todos';
          const viewToggle = document.querySelector('.view-toggle');
          const fabButton = document.querySelector('.fab-button');

          if (activeTab === 'calendar') {
            viewToggle.style.display = 'none';
            fabButton.style.display = 'none';
          } else if (isNowMobile) {
            viewToggle.style.display = 'none';
            fabButton.style.display = 'flex';
          } else {
            viewToggle.style.display = 'flex';
            fabButton.style.display = 'flex';
          }
        });

        const addForm = document.getElementById('addForm');
        if (addForm) {
          addForm.addEventListener('submit', function() {
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.classList.add('btn-loading');
            submitBtn.textContent = 'Menyimpan...';
          });
        }

        // Add Calendar Form loading
        const addCalendarForm = document.getElementById('addCalendarForm');
        if (addCalendarForm) {
          addCalendarForm.addEventListener('submit', function() {
            const submitBtn = document.getElementById('submitCalendarBtn');
            submitBtn.classList.add('btn-loading');
            submitBtn.textContent = 'Menyimpan...';
          });
        }

        // Edit Calendar Form loading
        const editCalendarForm = document.getElementById('editCalendarForm');
        if (editCalendarForm) {
          editCalendarForm.addEventListener('submit', function() {
            const submitBtn = document.getElementById('updateCalendarBtn');
            submitBtn.classList.add('btn-loading');
            submitBtn.textContent = 'Menyimpan...';
          });
        }
      });

      // Initialize Lucide icons
      lucide.createIcons();
    </script>
  </body>
</html>
